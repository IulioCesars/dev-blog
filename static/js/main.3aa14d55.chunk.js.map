{"version":3,"sources":["reportWebVitals.ts","Configuration.ts","Pages/HomePages/Navbar/Navbar.tsx","Components/Loading/Loading.tsx","Utils/MarkdownEditor.ts","Pages/PagesURL.ts","Services/PostsService.ts","Context/ListPostContext.tsx","Components/TagList/TagList.tsx","Pages/PostsPage/PostCard/PostCard.tsx","Pages/PostsPage/PostsPage.tsx","Pages/PostView/PostView.tsx","Pages/HomePages/HomePage.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Configuration","date","moment","format","PageName","DefaultPath","Accounts","Name","Url","BackgroundColor","FontColor","Icon","Navbar","useState","isActive","setIsActive","pageConfig","GetPageConfiguration","className","role","aria-label","to","aria-expanded","data-target","onClick","aria-hidden","id","map","it","i","target","rel","href","style","border","backgroundColor","color","Loading","props","IsLoading","MarkdownEditor","rawTextOriginal","lines","hiddenLines","this","split","method","text","search","startsWith","replace","_","getToolMethods","searchFunc","lineIndex","findIndex","index","lineText","cleanText","getLine","value","filter","some","join","PageURL","page","routes","pageRoute","args","a","baseURL","PostsService","basePath","getURL","postId","markdownBody","markEditor","elTitle","getElement","elDescription","elTags","elCreationDate","tags","trim","creationDate","toDate","Title","replaceAll","Description","MarkdownBody","toString","CoverURL","Tags","CreationDate","fetch","articlesResponse","json","articles","fetchPosts","posts","length","undefined","postList","folderName","articleBasePath","articleResponse","push","BuildPost","ListPostContext","React","createContext","Array","isLoading","refresh","force","getPost","ListPostProvider","postService","setPostList","setIsLoading","getLatestPosts","listPost","console","error","cachePost","find","Provider","children","TaskList","PostCard","postCard","imageStyle","backgroundImage","backgroundPosition","backgroundSize","dateString","GetDateInDefaultFormat","hideImage","cardContentClass","cardImageClass","src","alt","height","PostsPage","useContext","useEffect","PostView","post","setPost","useParams","Date","renderers","code","parameters","language","CodeTheme","fetchPost","linkTarget","transformImageUri","plugins","gfm","HomePage","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iOAceA,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,iECLDQ,EAAb,uGAEQ,MAAO,2CAFf,6CAKyCC,GACjC,OAAOC,IAAOD,GAAME,OAAO,gBANnC,6CAWQ,MAAO,CACHC,SAAU,WACVC,YAAa,IACbC,SAAU,CACN,CAAEC,KAAM,UAAWC,IAAK,kCAAmCC,gBAAiB,UAAWC,UAAW,QAASC,KAAK,IAChH,CAAEJ,KAAM,SAAUC,IAAK,iCAAkCC,gBAAiB,OAAQC,UAAW,QAASC,KAAK,UAhB3H,KCAO,SAASC,IAAwB,IAAD,IACHC,oBAAS,GADN,mBAC5BC,EAD4B,KAClBC,EADkB,KAE7BC,EAAahB,EAAciB,uBAGjC,OACI,sBAAKC,UAAU,8BAA8BC,KAAK,aAAaC,aAAW,kBAA1E,UACI,sBAAKF,UAAU,eAAf,UACI,cAAC,IAAD,CAAMA,UAAU,cAAcG,GAAIL,EAAWX,YAA7C,SACI,4BAAIW,EAAWZ,aAGnB,sBAAKe,KAAK,SAASC,aAAW,OAAOE,gBAAc,QAAQC,cAAY,qBACnEC,QAAS,kBAAMT,GAAaD,IAC5BI,UAAS,+BAA0BJ,EAAW,YAAc,IAFhE,UAGI,sBAAMW,cAAY,SAClB,sBAAMA,cAAY,SAClB,sBAAMA,cAAY,eAI1B,sBAAKC,GAAG,qBAAqBR,UAAS,8BAAyBJ,EAAW,YAAc,IAAxF,UACI,qBAAKI,UAAU,iBAIf,qBAAKA,UAAU,aAAf,SACI,qBAAKA,UAAU,cAAf,SACI,qBAAKA,UAAU,UAAf,mBAEQF,EAAWV,gBAFnB,aAEQ,EAAqBqB,KAAI,SAACC,EAAIC,GAAL,OAErB,mBAAWC,OAAO,SAASC,IAAI,aAAaC,KAAMJ,EAAGpB,IAAKU,UAAU,SAASe,MAAO,CAAEC,OAAQ,EAAGC,gBAAiBP,EAAGnB,gBAAiB2B,MAAOR,EAAGlB,WAAhJ,SACI,kCAAKkB,EAAGrB,KAAR,QADIsB,kB,kBCjCrC,SAASQ,EAAQC,GAGpB,OAFkBA,EAAMC,UAAY,qBAAKrB,UAAU,WAAkB,6B,qCCF5DsB,EAAb,WAII,WAA6BC,GAC5B,yBAD4BA,kBAC7B,KAJiBC,WAIjB,OAHOC,iBAGP,EACIC,KAAKF,MAAQD,EAAgBI,MAAM,MACnCD,KAAKD,YAAc,GAP3B,2DAU2BG,GAInB,OAAOA,GAEH,IAAK,aACD,MAAO,CACH,SAACC,EAAMC,GAAP,OAAkBD,EAAKE,WAAWD,IAClC,SAACD,EAAMC,GAAP,OAAkBD,EAAKG,QAAQF,EAAQ,MAG/C,QACI,MAAO,CAAC,SAACpB,EAAIuB,GAAL,OAAU,GAAO,SAAAvB,GAAE,OAAIA,OAvB/C,8BA4BmBkB,EAAuBC,GAGnC,IAAD,EAC4BH,KAAKQ,eAAeN,GADhD,mBACUO,EADV,KAEQC,GAFR,KAEoBV,KAAKF,MAAMa,WAAU,SAAA3B,GAAE,OAAIyB,EAAWzB,EAAImB,OAE5D,MAAO,CACHS,MAAOF,EACPG,SAAUb,KAAKF,MAAMY,MArCjC,iCAyCsBR,EAAsBC,GAIrC,IAAD,EAC2BH,KAAKQ,eAAeN,GAD/C,mBACaY,GADb,aAE8Bd,KAAKe,QAAQb,EAAQC,GAAzCS,EAFV,EAEUA,MAAOC,EAFjB,EAEiBA,SAEf,MAAO,CACHD,QACAC,WACAG,MAAOF,EAAUD,EAAUV,MApDvC,iCAwD+B,IAAD,OACtB,OAAOH,KAAKF,MACPmB,QAAO,SAACd,EAAMS,GAAP,OAAkB,EAAKb,YAAYmB,MAAK,SAAAlC,GAAE,OAAIA,IAAO4B,QAC5DO,KAAK,UA3DlB,KCGaC,EAAb,oGAGkBC,GACd,IACI,IAAMC,EAAS,CACX,YAAe,GACf,SAAY,QACZ,MAASlE,EAAcgE,UACvB,OAAS,GAAT,OAAahE,EAAcgE,UAA3B,YAGAG,EAAYD,EAAOD,GAR3B,mBADiCG,EACjC,iCADiCA,EACjC,kBAUI,IAAI,IAAJ,MAAeA,EAAf,gBAAI,IAAMC,EAAC,KACPF,GAAa,IAAME,EAEvB,OAAOF,MAjBf,KAAaH,EACFM,QAAU,GCAd,IAAMC,EAAb,WAEI,aAAe,yBADPC,cACM,EACV5B,KAAK4B,SAAWR,EAAQS,OAAO,UAHvC,sDAMsBC,EAAgBC,GAA8B,IAAD,EACrDC,EAAa,IAAIpC,EAAemC,GAEhCE,EAAUD,EAAWE,WAAW,aAAc,KAC9CC,EAAgBH,EAAWE,WAAW,aAAc,gBACpDE,EAASJ,EAAWE,WAAW,aAAc,SAC7CG,EAAiBL,EAAWE,WAAW,aAAc,YAGrDI,EAAI,OAAGF,QAAH,IAAGA,GAAH,UAAGA,EAAQpB,aAAX,aAAG,EAAef,MAAM,KAAKlB,KAAI,SAAAC,GAAE,OAAIA,EAAGuD,UAC9CC,EAAelF,IAAO+E,EAAerB,MAAO,CAAC,eAAeyB,SAmBlE,OAjBAT,EAAWjC,YAAc,CACrBkC,EAAQrB,MACRuB,EAAcvB,MACdwB,EAAOxB,MACPyB,EAAezB,OAGC,CAChB8B,MAAOT,EAAUA,EAAQjB,MAAQc,EAAOa,WAAW,IAAK,KACxDC,YAAW,OAAET,QAAF,IAAEA,OAAF,EAAEA,EAAenB,MAC5BrD,KAAMmE,EACNe,aAAcb,EAAWc,WACzBC,SAAU,GACVC,KAAMV,EACNW,aAAcT,KAhC1B,yKAwCqCU,MAAM,GAAD,OAAIlD,KAAK4B,SAAT,mBAxC1C,cAwCYuB,EAxCZ,gBAyCuCA,EAAiBC,OAzCxD,cAyCYC,EAzCZ,yBA2CerD,KAAKsD,WAAL,MAAAtD,KAAA,YAAmBqD,KA3ClC,6KA8CkBvB,GA9ClB,uFA+C4B9B,KAAKsD,WAAWxB,GA/C5C,cA+CcyB,EA/Cd,yBAgDeA,EAAMC,OAAS,EAAID,EAAM,QAAKE,GAhD7C,4RAoDcF,EAAgB,GApD9B,WAmDgCG,EAnDhC,yBAmDgCA,EAnDhC,cAsDgCA,EAtDhC,gDAsDkBC,EAtDlB,KAwDkBC,EAxDlB,UAwDuC5D,KAAK4B,SAxD5C,YAwDwD+B,GAxDxD,SAyDwCT,MAAM,GAAD,OAAIU,EAAJ,cAzD7C,cAyDgBC,EAzDhB,iBA0DqCA,EAAgB1D,OA1DrD,QA0DgB4B,EA1DhB,OA4DYwB,EAAMO,KAAK9D,KAAK+D,UAAUJ,EAAY5B,IA5DlD,4DA+DewB,GA/Df,8GCFaS,EAAkBC,IAAMC,cAAc,CAC/CR,SAAU,IAAIS,MACdC,WAAW,EACXC,QAAQ,WAAD,4BAAE,WAAOC,GAAP,SAAA7C,EAAA,0FAAF,mDAAC,GACR8C,QAAQ,WAAD,4BAAE,WAAOzC,GAAP,SAAAL,EAAA,+EAA+D,IAA/D,2CAAF,mDAAC,KAGL,SAAS+C,EAAiB9E,GAC7B,IAAM+E,EAAc,IAAI9C,EAD8B,EAGpB1D,mBAAiB,IAHG,mBAG9CyF,EAH8C,KAGpCgB,EAHoC,OAIlBzG,oBAAS,GAJS,mBAI9CmG,EAJ8C,KAInCO,EAJmC,KAKhDN,EAAO,uCAAG,WAAOC,GAAP,eAAA7C,EAAA,2DACTiC,EAASF,OAAS,IAAMc,EADf,iEAMRK,GAAa,GANL,SAQeF,EAAYG,iBAR3B,OAQFC,EARE,OASRH,EAAYG,GATJ,kDAYVC,QAAQC,MAAR,MAZU,yBAcVJ,GAAa,GAdH,6EAAH,sDAgBPJ,EAAO,uCAAG,WAAOzC,GAAP,eAAAL,EAAA,6DACNuD,EAAYtB,EAASuB,MAAK,SAAAjG,GAAE,OAAIA,EAAGrB,KAAOmE,KADpC,kBAGLkD,GAAwBP,EAAYF,QAAQzC,IAHvC,2CAAH,sDAMb,OACI,cAACkC,EAAgBkB,SAAjB,CAA0BlE,MAAO,CAAC0C,WAAUU,YAAWC,UAASE,WAAhE,SACK7E,EAAMyF,W,OCnCZ,SAASC,EAAS1F,GACrB,OACI,qBAAKpB,UAAS,yBAAoBoB,EAAMpB,WAAxC,SACMoB,EAAM4C,KAAKvD,KAAI,SAACC,EAAIC,GAAL,OAAY,cAAC,IAAD,CAAcR,GAAI2C,EAAQS,OAAO,eAAiBvD,UAAU,cAA5D,SAA2EU,GAAhEC,QCI7C,SAASoG,EAAS3F,GACrB,IAAM4F,EAAW5F,EAAM2F,SAEjBE,EAAa,CACfC,gBAAgB,OAAD,OAASF,EAASvC,SAAlB,KACf0C,mBAAoB,SACpBC,eAAgB,SAGdC,EAAavI,EAAcwI,uBAAuBN,EAASrC,cAC3D4C,EAAiD,KAApCP,EAASvC,UAAY,IAAIS,OAEtCsC,EAAgB,aAASD,EAAY,GAAK,GAC1CE,EAAc,aAASF,EAAY,EAAI,EAAzB,YAA8BA,EAAY,YAAa,IAE3E,OACI,qBAAKvH,UAAU,OAAf,SACI,sBAAKA,UAAU,cAAf,UACI,sBAAKA,UAAS,iBAAYyH,EAAZ,QAAd,UACI,qBAAKzH,UAAU,6BAA6Be,MAAOkG,IACnD,qBAAKjH,UAAU,+BAAf,SACI,qBAAK0H,IAAKV,EAASvC,SAAUkD,IAAKX,EAAS5C,MAAOwD,OAAO,cAGjE,qBAAK5H,UAAS,iBAAYwH,EAAZ,QAAd,SACI,sBAAKxH,UAAU,wBAAf,UACI,sBAAKA,UAAU,mBAAf,UACI,cAAC,IAAD,CAAMG,GAAI2C,EAAQS,OAAO,WAAYyD,EAAS3H,MAAOW,UAAU,aAA/D,SACKgH,EAAS5C,QAEd,cAAC0C,EAAD,CAAU9G,UAAU,YAAYgE,KAAMgD,EAAStC,UAEnD,qBAAK1E,UAAU,wEAAf,SACKgH,EAAS1C,cAEd,qBAAKtE,UAAU,iDAAf,SACKgH,EAAS1C,cAEd,qBAAKtE,UAAU,OAAf,SACI,mBAAGA,UAAU,cAAb,SAA6BqH,gBC9ClD,SAASQ,IAA2B,IAAD,EACGC,qBAAWpC,GAA5CN,EAD8B,EAC9BA,SAAUW,EADoB,EACpBA,QAASD,EADW,EACXA,UAI3B,OAFAiC,qBAAU,WAAQhC,GAAQ,KAAS,CAACA,EAASX,IAGzC,sBAAKpF,UAAU,uBAAf,UACI,cAAC,EAAD,CAASqB,UAAWyE,IAEhBV,EAAS3E,KAAI,SAACC,EAAIC,GAAL,OACb,qBAAaX,UAAU,cAAvB,SACI,cAAC,EAAD,CAAU+G,SAAUrG,KADdC,S,wDCAnB,SAASqH,IAAyB,IAAD,MAC5B/B,EAAY6B,qBAAWpC,GAAvBO,QAD4B,EAEVtG,qBAFU,mBAE5BsI,EAF4B,KAEtBC,EAFsB,OAGAvI,oBAAS,GAHT,mBAG5BmG,EAH4B,KAGjBO,EAHiB,KAI5B7C,EAAW2E,cAAX3E,OACF6D,EAAavI,EAAcwI,uBAAd,iBAAqCW,QAArC,IAAqCA,OAArC,EAAqCA,EAAMtD,oBAA3C,QAA2D,IAAIyD,MAE5EC,EAAY,CACdC,KAAM,SAACC,GAAqB,IAChBC,EAAoBD,EAApBC,SAAU9F,EAAU6F,EAAV7F,MAClB,OAAO,cAAC,IAAD,CAAmB3B,MAAO0H,IAAmBD,SAAUA,EAAU3B,SAAUnE,MAuB1F,OAZAqF,qBAAU,YACS,uCAAG,4BAAA5E,EAAA,6DACdkD,GAAa,GADC,SAGKJ,EAAQzC,GAHb,OAGRyE,EAHQ,OAIdC,EAAQD,GAER5B,GAAa,GANC,2CAAH,qDAQfqC,KACD,CAACzC,EAASzC,IAGT,qBAAKxD,UAAU,8BAAf,SACI,sBAAKA,UAAU,OAAf,UACI,cAAC,EAAD,CAASqB,UAAayE,IACtB,sBAAK9F,UAAU,eAAf,UACI,mBAAGA,UAAU,QAAb,gBACKiI,QADL,IACKA,OADL,EACKA,EAAM7D,QAEX,sBAAKpE,UAAU,eAAf,UACI,cAAC8G,EAAD,CAAU9G,UAAU,6BAA6BgE,KAAI,iBAAEiE,QAAF,IAAEA,OAAF,EAAEA,EAAMvD,YAAR,QAAgB,KACrE,qBAAK1E,UAAU,wBAAf,SACI,mBAAGA,UAAU,cAAb,SAA6BqH,SAGrC,uBACA,qBAAKrH,UAAU,UAAf,SACI,cAAC,IAAD,CAAe2I,WAAW,SAC1BN,UAAWA,EACPO,kBAAmB,SAAAlI,GAAE,OArCnB,SAACA,GACvB,OAAIuH,EAGGnF,EAAQS,OAAO,SAAU0E,EAAK5I,KAAMqB,GAFhC,GAmCkCkI,CAAkBlI,IAC3CmI,QAAS,CAACC,KAHd,0BAIKb,QAJL,IAIKA,OAJL,EAIKA,EAAM1D,oBAJX,QAI2B,eC3D5C,SAASwE,IAEZ,OACI,mCACI,eAAC,IAAD,WACI,cAACrJ,EAAD,IACA,cAACwG,EAAD,UACI,qBAAK1F,GAAG,MAAMR,UAAU,gBAAxB,SACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOgJ,KAAK,iBAAZ,SACI,cAAChB,EAAD,MAEJ,cAAC,IAAD,CAAOgB,KAAK,IAAZ,SACI,cAACnB,EAAD,GAAgB,iBCZhDoB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACJ,EAAD,MAEFK,SAASC,eAAe,SAM1BhL,M","file":"static/js/main.3aa14d55.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { PageConfiguration } from \"./Models/PageConfiguration\";\r\nimport moment from 'moment';\r\nimport { env } from \"process\";\r\n\r\nexport class Configuration {\r\n    public static PageURL(): string {\r\n        return \"https://iuliocesars.github.io/dev-blog\";\r\n    }\r\n\r\n    public static GetDateInDefaultFormat(date: Date) {\r\n        return moment(date).format(\"DD/MM/yyyy\");\r\n    }\r\n\r\n    public static GetPageConfiguration() : PageConfiguration \r\n    {\r\n        return {\r\n            PageName: 'Dev Blog',\r\n            DefaultPath: '/',\r\n            Accounts: [\r\n                { Name: 'Twitter', Url: 'https://twitter.com/IulioCesars', BackgroundColor: '#52a2f3', FontColor: 'white', Icon:'' },\r\n                { Name: 'Github', Url: 'https://github.com/IulioCesars', BackgroundColor: 'gray', FontColor: 'white', Icon:'' },\r\n            ]\r\n        }\r\n    }\r\n}","import React, { useState } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { Configuration } from '../../../Configuration';\r\n\r\nexport function Navbar() : JSX.Element {\r\n    const [isActive, setIsActive] = useState(false);\r\n    const pageConfig = Configuration.GetPageConfiguration();\r\n\r\n\r\n    return(\r\n        <nav className=\"navbar is-dark is-fixed-top\" role=\"navigation\" aria-label=\"main navigation\">\r\n            <div className=\"navbar-brand\">\r\n                <Link className=\"navbar-item\" to={pageConfig.DefaultPath}>\r\n                    <b>{pageConfig.PageName}</b>\r\n                </Link>\r\n\r\n                <div role=\"button\" aria-label=\"menu\" aria-expanded=\"false\" data-target=\"navbarBasicExample\"\r\n                    onClick={() => setIsActive(!isActive) }\r\n                    className={`navbar-burger burger ${isActive ? 'is-active' : ''}`}>\r\n                    <span aria-hidden=\"true\"></span>\r\n                    <span aria-hidden=\"true\"></span>\r\n                    <span aria-hidden=\"true\"></span>\r\n                </div>\r\n            </div>\r\n\r\n            <div id=\"navbarBasicExample\" className={`navbar-menu is-dark ${isActive ? 'is-active' : ''}`}>\r\n                <div className=\"navbar-start\">\r\n                    {/* <a className=\"navbar-item\">About</a> */}\r\n                </div>\r\n\r\n                <div className=\"navbar-end\">\r\n                    <div className=\"navbar-item\">\r\n                        <div className=\"buttons\">\r\n                            {\r\n                                pageConfig.Accounts?.map((it, i) => \r\n                                    (\r\n                                    <a key={i} target=\"_blank\" rel=\"noreferrer\" href={it.Url} className=\"button\" style={{ border: 0, backgroundColor: it.BackgroundColor, color: it.FontColor}}>\r\n                                        <b> {it.Name} </b> \r\n                                    </a>\r\n                                    )\r\n                                )\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}","import React from 'react'\r\nimport './Loading.css';\r\n\r\nexport function Loading(props: {IsLoading: boolean}) {\r\n    const component = props.IsLoading ? <div className=\"loader\"></div> : <></>;\r\n\r\n    return(component);\r\n}","declare type searchMethods = 'startsWith';\r\n\r\nexport class MarkdownEditor {\r\n    private readonly lines: string[];\r\n    public hiddenLines: number[];\r\n    \r\n    constructor(private readonly rawTextOriginal : string)\r\n    {\r\n        this.lines = rawTextOriginal.split('\\n');\r\n        this.hiddenLines = [];\r\n    }\r\n\r\n    private getToolMethods(method: searchMethods): [\r\n        searchFunc: (text: string, searchText: string) => boolean,\r\n        cleanText: (text : string, searchText: string) => string\r\n     ] {\r\n        switch(method)\r\n        {\r\n            case \"startsWith\": {\r\n                return [\r\n                    (text, search) => text.startsWith(search),\r\n                    (text, search) => text.replace(search, \"\")\r\n                ];\r\n            }\r\n            default: {\r\n                return [(it, _)=> false, it => it];\r\n            }\r\n        }\r\n    }\r\n\r\n    public getLine(method: searchMethods, text: string): {\r\n        index: number,\r\n        lineText: string\r\n    } {\r\n        const [ searchFunc, _ ] = this.getToolMethods(method);\r\n        const lineIndex = this.lines.findIndex(it => searchFunc(it, text));\r\n\r\n        return {\r\n            index: lineIndex, \r\n            lineText: this.lines[lineIndex]\r\n        };\r\n    }\r\n\r\n    public getElement(method: 'startsWith', text: string) : {\r\n        index: number,\r\n        lineText: string,\r\n        value: string\r\n    } {\r\n        const [ _, cleanText ] = this.getToolMethods(method);\r\n        const { index, lineText } = this.getLine(method, text);\r\n\r\n        return {\r\n            index, \r\n            lineText, \r\n            value: cleanText(lineText, text)\r\n        };\r\n    }\r\n\r\n    public toString(): string {\r\n        return this.lines\r\n            .filter((text, index) => !this.hiddenLines.some(it => it === index))\r\n            .join(\"\\n\");\r\n    }\r\n}","import { Configuration } from \"../Configuration\";\r\n\r\nexport declare type PageType = 'SearchByTag' | 'PostView' | 'Local' | 'Assets'\r\n\r\n\r\nexport class PageURL {\r\n    static baseURL = \"\";\r\n\r\n    static getURL(page: PageType, ...args: string[]): string\r\n    {\r\n        const routes = {\r\n            \"SearchByTag\": \"\",\r\n            \"PostView\": \"posts\",\r\n            \"Local\": Configuration.PageURL(),\r\n            \"Assets\": `${Configuration.PageURL()}/assets`\r\n        }\r\n\r\n        let pageRoute = routes[page];\r\n\r\n        for(const a of args)\r\n            pageRoute += '/' + a;\r\n\r\n        return pageRoute;\r\n    }\r\n}","import { Post } from \"../Models/Post\";\r\nimport moment from 'moment';\r\nimport { MarkdownEditor } from \"../Utils/MarkdownEditor\";\r\nimport { PageURL } from \"../Pages/PagesURL\";\r\n\r\n\r\nexport class PostsService {\r\n    private basePath: string;\r\n    constructor() {\r\n        this.basePath = PageURL.getURL(\"Assets\");\r\n    }\r\n    \r\n    private BuildPost(postId: string, markdownBody: string) : Post {\r\n        const markEditor = new MarkdownEditor(markdownBody);\r\n\r\n        const elTitle = markEditor.getElement('startsWith', \"#\");\r\n        const elDescription = markEditor.getElement('startsWith', \"Description:\");\r\n        const elTags = markEditor.getElement('startsWith', \"Tags:\");\r\n        const elCreationDate = markEditor.getElement('startsWith', \"Created:\");\r\n\r\n\r\n        const tags = elTags?.value?.split(\",\").map(it => it.trim());\r\n        const creationDate = moment(elCreationDate.value, [\"dd/MM/YYYY\"]).toDate();\r\n\r\n        markEditor.hiddenLines = [\r\n            elTitle.index,\r\n            elDescription.index,\r\n            elTags.index,\r\n            elCreationDate.index\r\n        ];\r\n\r\n        const post : Post = {\r\n            Title: elTitle ? elTitle.value : postId.replaceAll(\"_\", \" \"),\r\n            Description: elDescription?.value,\r\n            Name: postId,\r\n            MarkdownBody: markEditor.toString(),\r\n            CoverURL: '',\r\n            Tags: tags,\r\n            CreationDate: creationDate\r\n        };\r\n\r\n        return post;\r\n    }\r\n\r\n    async getLatestPosts(): Promise<Post[]> \r\n    {\r\n        var articlesResponse = await fetch(`${this.basePath}/articles.json`);\r\n        var articles: string[] = await articlesResponse.json();\r\n\r\n        return this.fetchPosts(...articles);\r\n    }\r\n\r\n    async getPost(postId: string) {\r\n        const posts = await this.fetchPosts(postId);\r\n        return posts.length > 0 ? posts[0] : undefined;\r\n    }\r\n\r\n    private async fetchPosts(...postList: string[]){\r\n        const posts: Post[] = [];\r\n\r\n        for(const folderName of postList)\r\n        {\r\n            const articleBasePath = `${this.basePath}/${folderName}`\r\n            var articleResponse = await fetch(`${articleBasePath}/index.md`);\r\n            var markdownBody = await articleResponse.text();\r\n\r\n            posts.push(this.BuildPost(folderName, markdownBody));\r\n        }\r\n\r\n        return posts;\r\n    }\r\n}","import React, { useState } from 'react'\r\nimport { Post } from '../Models/Post';\r\nimport { PostsService } from '../Services/PostsService';\r\n\r\nexport const ListPostContext = React.createContext({\r\n    postList: new Array<Post>(),\r\n    isLoading: false,\r\n    refresh: async (force: boolean) => {},\r\n    getPost: async (postId: string) : Promise<Post | undefined> => { return {} as Post  }\r\n})\r\n\r\nexport function ListPostProvider(props: any): JSX.Element {\r\n    const postService = new PostsService();\r\n\r\n    const [ postList, setPostList ] = useState<Post[]>([]);\r\n    const [ isLoading, setIsLoading ] = useState(false);\r\n    const refresh = async (force: boolean) => {\r\n        if(postList.length > 0 || !force)\r\n            return;\r\n\r\n        try\r\n        {\r\n            setIsLoading(true);\r\n\r\n            const listPost = await postService.getLatestPosts();\r\n            setPostList(listPost);\r\n        }\r\n        catch(ex)\r\n        { console.error(ex); }\r\n        finally \r\n        { setIsLoading(false); }\r\n    };\r\n    const getPost = async (postId: string) => {\r\n        const cachePost = postList.find(it => it.Name = postId);\r\n\r\n        return cachePost ? cachePost : postService.getPost(postId);\r\n    }\r\n\r\n    return(\r\n        <ListPostContext.Provider value={{postList, isLoading, refresh, getPost}}>\r\n            {props.children}\r\n        </ListPostContext.Provider>\r\n    );\r\n} ","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { PageURL } from '../../Pages/PagesURL';\r\n\r\n\r\nexport function TaskList(props: { tags: string[], className?: string }) {\r\n    return (   \r\n        <div className={`tags are-small ${props.className}`}>\r\n            { props.tags.map((it, i) => (<Link key={i} to={PageURL.getURL(\"SearchByTag\",)} className=\"tag is-link\">{it}</Link>))}\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport { Post } from '../../../Models/Post';\r\nimport './PostCard.css'\r\nimport { PageURL } from '../../PagesURL';\r\nimport { Link } from 'react-router-dom';\r\nimport { TaskList } from '../../../Components/TagList/TagList';\r\nimport { Configuration } from '../../../Configuration';\r\n\r\nexport declare type PostCardProps = {\r\n    PostCard: Post\r\n};\r\n\r\nexport function PostCard(props: PostCardProps) : JSX.Element {\r\n    const postCard = props.PostCard;\r\n\r\n    const imageStyle = {\r\n        backgroundImage: `url(${postCard.CoverURL})`, \r\n        backgroundPosition: 'center', \r\n        backgroundSize: 'cover' \r\n    };\r\n\r\n    const dateString = Configuration.GetDateInDefaultFormat(postCard.CreationDate);\r\n    const hideImage = (postCard.CoverURL || '').length === 0;\r\n\r\n    const cardContentClass = `is-${hideImage ? 12 : 6}`;\r\n    const cardImageClass = `is-${hideImage ? 0 : 6} ${hideImage ? 'is-hidden': ''}`;\r\n\r\n    return(\r\n        <div className=\"card\">\r\n            <div className=\"columns m-0\">\r\n                <div className={`column ${cardImageClass} p-0`}>\r\n                    <div className=\"card-image is-hidden-touch\" style={imageStyle} />\r\n                    <div className=\"card-image is-hidden-desktop\" >\r\n                        <img src={postCard.CoverURL} alt={postCard.Title} height='100%' />\r\n                    </div>\r\n                </div>\r\n                <div className={`column ${cardContentClass} p-0`}>\r\n                    <div className=\"card-content p-2 pr-3\">\r\n                        <div className=\"content p-2 mb-0\">\r\n                            <Link to={PageURL.getURL('PostView', postCard.Name)} className=\"title is-4\">\r\n                                {postCard.Title}\r\n                            </Link>\r\n                            <TaskList className=\"pt-2 is-6\" tags={postCard.Tags} />\r\n                        </div>\r\n                        <div className=\"content p-2 card-description card-description-desktop is-hidden-touch\" >\r\n                            {postCard.Description}\r\n                        </div>\r\n                        <div className=\"content p-2 card-description is-hidden-desktop\" >\r\n                            {postCard.Description}\r\n                        </div>\r\n                        <div className=\"pt-1\">\r\n                            <b className=\"level-right\" >{dateString}</b>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React, { useContext, useEffect } from 'react'\r\nimport { Loading } from '../../Components/Loading/Loading';\r\nimport { ListPostContext } from '../../Context/ListPostContext';\r\nimport { PostCard } from './PostCard/PostCard';\r\n\r\nexport function PostsPage() : JSX.Element {\r\n    const { postList, refresh, isLoading } = useContext(ListPostContext);\r\n\r\n    useEffect(() => { refresh(true) }, [refresh, postList]);\r\n\r\n    return(\r\n        <div className=\"columns is-multiline\">\r\n            <Loading IsLoading={isLoading}/>\r\n            {\r\n                postList.map((it, i) => (\r\n                <div key={i} className=\"column is-6\">\r\n                    <PostCard PostCard={it}/>\r\n                </div>\r\n                ))\r\n            }\r\n        </div>\r\n    );\r\n}","import React, { useContext, useEffect, useState } from 'react'\r\nimport ReactMarkdown from 'react-markdown';\r\nimport { useParams } from 'react-router-dom';\r\nimport { ListPostContext } from '../../Context/ListPostContext';\r\nimport { Post } from '../../Models/Post';\r\nimport gfm from 'remark-gfm'\r\nimport { PageURL } from '../PagesURL';\r\nimport { TaskList } from '../../Components/TagList/TagList';\r\nimport { Configuration } from '../../Configuration';\r\nimport {Prism as SyntaxHighlighter} from 'react-syntax-highlighter'\r\nimport * as CodeTheme from 'react-syntax-highlighter/dist/esm/styles/prism'\r\nimport { Loading } from '../../Components/Loading/Loading';\r\n\r\n\r\n\r\nexport function PostView(): JSX.Element {\r\n    const { getPost } = useContext(ListPostContext);\r\n    const [ post, setPost ] = useState<Post>();\r\n    const [ isLoading, setIsLoading ] = useState(false);\r\n    const { postId } = useParams<{postId: string}>();\r\n    const dateString = Configuration.GetDateInDefaultFormat(post?.CreationDate ?? new Date());\r\n\r\n    const renderers = {\r\n        code: (parameters: any) => {\r\n            const { language, value } = parameters;\r\n            return <SyntaxHighlighter style={CodeTheme.darcula} language={language} children={value} />\r\n        }\r\n    }\r\n\r\n    const transformImageUri = (it: string) => {\r\n        if(!post)\r\n            return \"\";\r\n\r\n        return PageURL.getURL(\"Assets\", post.Name, it);\r\n    }\r\n\r\n    useEffect(() => { \r\n        const fetchPost = async () => {\r\n            setIsLoading(true);\r\n\r\n            const post = await getPost(postId);\r\n            setPost(post);\r\n\r\n            setIsLoading(false);\r\n        }\r\n        fetchPost();    \r\n    }, [getPost, postId]);\r\n\r\n    return(\r\n        <div className=\"container is-max-widescreen\">\r\n            <div className=\"card\">\r\n                <Loading IsLoading = {isLoading} />\r\n                <div className=\"card-content\">\r\n                    <p className=\"title\">\r\n                        {post?.Title}\r\n                    </p>\r\n                    <div className=\"columns mb-0\">\r\n                        <TaskList className=\"column is-10 m-0 pt-0 pb-0\" tags={post?.Tags ?? []} />\r\n                        <div className=\"column is-2 pt-0 pb-1\">\r\n                            <b className=\"level-right\" >{dateString}</b>\r\n                        </div>\r\n                    </div>\r\n                    <br></br>\r\n                    <div className=\"content\">\r\n                        <ReactMarkdown linkTarget=\"_blank\" \r\n                        renderers={renderers} \r\n                            transformImageUri={it => transformImageUri(it) } \r\n                            plugins={[gfm]} >\r\n                            {post?.MarkdownBody ?? '' }\r\n                        </ReactMarkdown>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}","\r\nimport React from 'react';\r\nimport { Navbar } from './Navbar/Navbar';\r\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\r\nimport { PostsPage } from '../PostsPage/PostsPage';\r\nimport { PostView } from '../PostView/PostView';\r\nimport { ListPostProvider } from '../../Context/ListPostContext';\r\n  \r\n\r\nexport function HomePage() : JSX.Element {\r\n\r\n    return(\r\n        <>\r\n            <BrowserRouter>\r\n                <Navbar/>\r\n                <ListPostProvider>\r\n                    <div id=\"app\" className=\"container p-2\">\r\n                        <Switch>\r\n                            <Route path=\"/posts/:postId\">\r\n                                <PostView/>\r\n                            </Route>\r\n                            <Route path=\"/\">\r\n                                <PostsPage key={1}/>\r\n                            </Route>\r\n                        </Switch>\r\n                    </div>\r\n                </ListPostProvider>\r\n            </BrowserRouter>\r\n        </>\r\n    );\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\n\nimport 'bulma';\nimport './index.css'\n\n\nimport { HomePage } from './Pages';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HomePage/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}